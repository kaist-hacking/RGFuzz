test compile precise-output
set unwind_info=false
target aarch64

function %f0(r64) -> r64 {
block0(v0: r64):
  return v0
}

; VCode:
; block0:
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ret

function %f1(r64) -> i8 {
block0(v0: r64):
  v1 = is_null v0
  return v1
}

; VCode:
; block0:
;   subs xzr, x0, #0
;   cset x0, eq
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   cmp x0, #0
;   cset x0, eq
;   ret

function %f2(r64) -> i8 {
block0(v0: r64):
  v1 = is_invalid v0
  return v1
}

; VCode:
; block0:
;   adds xzr, x0, #1
;   cset x0, eq
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   cmn x0, #1
;   cset x0, eq
;   ret

function %f3() -> r64 {
block0:
  v0 = null.r64
  return v0
}

; VCode:
; block0:
;   movz x0, #0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mov x0, #0
;   ret

function %f4(r64, r64) -> r64, r64, r64 {
    fn0 = %f(r64) -> i8
    ss0 = explicit_slot 8

block0(v0: r64, v1: r64):
    v2 = call fn0(v0)
    stack_store.r64 v0, ss0
    brif v2, block2(v0, v1), block1(v1, v0)

block1(v3: r64, v4: r64):
    jump block3(v3, v4)

block2(v5: r64, v6: r64):
    jump block3(v5, v6)

block3(v7: r64, v8: r64):
    v9 = stack_load.r64 ss0
    return v7, v8, v9
}

; VCode:
;   stp fp, lr, [sp, #-16]!
;   mov fp, sp
;   str x24, [sp, #-16]!
;   sub sp, sp, #32
; block0:
;   mov x5, x0
;   str x1, [sp, #16]
;   mov x0, x5
;   mov x24, x5
;   load_ext_name x12, TestCase(%f)+0
;   str x24, [sp, #8]
;   blr x12
;   mov x11, sp
;   mov x5, x24
;   str x5, [x11]
;   uxtb w12, w0
;   cbnz x12, label2 ; b label1
; block1:
;   ldr x0, [sp, #16]
;   mov x1, x24
;   b label3
; block2:
;   mov x0, x24
;   ldr x1, [sp, #16]
;   b label3
; block3:
;   mov x15, sp
;   ldr x2, [x15]
;   add sp, sp, #32
;   ldr x24, [sp], #16
;   ldp fp, lr, [sp], #16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   stp x29, x30, [sp, #-0x10]!
;   mov x29, sp
;   str x24, [sp, #-0x10]!
;   sub sp, sp, #0x20
; block1: ; offset 0x10
;   mov x5, x0
;   stur x1, [sp, #0x10]
;   mov x0, x5
;   mov x24, x5
;   ldr x12, #0x28
;   b #0x30
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %f 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   stur x24, [sp, #8]
;   blr x12
;   mov x11, sp
;   mov x5, x24
;   str x5, [x11]
;   uxtb w12, w0
;   cbnz x12, #0x58
; block2: ; offset 0x4c
;   ldur x0, [sp, #0x10]
;   mov x1, x24
;   b #0x60
; block3: ; offset 0x58
;   mov x0, x24
;   ldur x1, [sp, #0x10]
; block4: ; offset 0x60
;   mov x15, sp
;   ldr x2, [x15]
;   add sp, sp, #0x20
;   ldr x24, [sp], #0x10
;   ldp x29, x30, [sp], #0x10
;   ret

