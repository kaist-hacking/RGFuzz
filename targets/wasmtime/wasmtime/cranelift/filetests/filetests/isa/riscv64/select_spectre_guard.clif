test compile precise-output
set unwind_info=false
target riscv64

function %f(i8, i8, i8) -> i8 {
block0(v0: i8, v1: i8, v2: i8):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i8 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   slli a3,a0,56
;   srai a5,a3,56
;   xori a3,a5,42
;   seqz a3,a3
;   sub a3,zero,a3
;   and a4,a3,a1
;   not a0,a3
;   and a2,a2,a0
;   or a0,a4,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a3, a0, 0x38
;   srai a5, a3, 0x38
;   xori a3, a5, 0x2a
;   seqz a3, a3
;   neg a3, a3
;   and a4, a3, a1
;   not a0, a3
;   and a2, a2, a0
;   or a0, a4, a2
;   ret

function %f(i8, i16, i16) -> i16 {
block0(v0: i8, v1: i16, v2: i16):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i16 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   slli a3,a0,56
;   srai a5,a3,56
;   xori a3,a5,42
;   seqz a3,a3
;   sub a3,zero,a3
;   and a4,a3,a1
;   not a0,a3
;   and a2,a2,a0
;   or a0,a4,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a3, a0, 0x38
;   srai a5, a3, 0x38
;   xori a3, a5, 0x2a
;   seqz a3, a3
;   neg a3, a3
;   and a4, a3, a1
;   not a0, a3
;   and a2, a2, a0
;   or a0, a4, a2
;   ret

function %f(i8, i32, i32) -> i32 {
block0(v0: i8, v1: i32, v2: i32):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i32 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   slli a3,a0,56
;   srai a5,a3,56
;   xori a3,a5,42
;   seqz a3,a3
;   sub a3,zero,a3
;   and a4,a3,a1
;   not a0,a3
;   and a2,a2,a0
;   or a0,a4,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a3, a0, 0x38
;   srai a5, a3, 0x38
;   xori a3, a5, 0x2a
;   seqz a3, a3
;   neg a3, a3
;   and a4, a3, a1
;   not a0, a3
;   and a2, a2, a0
;   or a0, a4, a2
;   ret

function %f(i8, i64, i64) -> i64 {
block0(v0: i8, v1: i64, v2: i64):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i64 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   slli a3,a0,56
;   srai a5,a3,56
;   xori a3,a5,42
;   seqz a3,a3
;   sub a3,zero,a3
;   and a4,a3,a1
;   not a0,a3
;   and a2,a2,a0
;   or a0,a4,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a3, a0, 0x38
;   srai a5, a3, 0x38
;   xori a3, a5, 0x2a
;   seqz a3, a3
;   neg a3, a3
;   and a4, a3, a1
;   not a0, a3
;   and a2, a2, a0
;   or a0, a4, a2
;   ret

function %f(i8, i128, i128) -> i128 {
block0(v0: i8, v1: i128, v2: i128):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i128 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   slli a5,a0,56
;   srai a5,a5,56
;   xori a5,a5,42
;   seqz a5,a5
;   sub a5,zero,a5
;   and a0,a5,a1
;   not a1,a5
;   and a1,a3,a1
;   or a0,a0,a1
;   and a2,a5,a2
;   not a5,a5
;   and a1,a4,a5
;   or a1,a2,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a5, a0, 0x38
;   srai a5, a5, 0x38
;   xori a5, a5, 0x2a
;   seqz a5, a5
;   neg a5, a5
;   and a0, a5, a1
;   not a1, a5
;   and a1, a3, a1
;   or a0, a0, a1
;   and a2, a5, a2
;   not a5, a5
;   and a1, a4, a5
;   or a1, a2, a1
;   ret

function %f(i16, i8, i8) -> i8 {
block0(v0: i16, v1: i8, v2: i8):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i8 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   slli a3,a0,48
;   srai a5,a3,48
;   xori a3,a5,42
;   seqz a3,a3
;   sub a3,zero,a3
;   and a4,a3,a1
;   not a0,a3
;   and a2,a2,a0
;   or a0,a4,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a3, a0, 0x30
;   srai a5, a3, 0x30
;   xori a3, a5, 0x2a
;   seqz a3, a3
;   neg a3, a3
;   and a4, a3, a1
;   not a0, a3
;   and a2, a2, a0
;   or a0, a4, a2
;   ret

function %f(i16, i16, i16) -> i16 {
block0(v0: i16, v1: i16, v2: i16):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i16 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   slli a3,a0,48
;   srai a5,a3,48
;   xori a3,a5,42
;   seqz a3,a3
;   sub a3,zero,a3
;   and a4,a3,a1
;   not a0,a3
;   and a2,a2,a0
;   or a0,a4,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a3, a0, 0x30
;   srai a5, a3, 0x30
;   xori a3, a5, 0x2a
;   seqz a3, a3
;   neg a3, a3
;   and a4, a3, a1
;   not a0, a3
;   and a2, a2, a0
;   or a0, a4, a2
;   ret

function %f(i16, i32, i32) -> i32 {
block0(v0: i16, v1: i32, v2: i32):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i32 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   slli a3,a0,48
;   srai a5,a3,48
;   xori a3,a5,42
;   seqz a3,a3
;   sub a3,zero,a3
;   and a4,a3,a1
;   not a0,a3
;   and a2,a2,a0
;   or a0,a4,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a3, a0, 0x30
;   srai a5, a3, 0x30
;   xori a3, a5, 0x2a
;   seqz a3, a3
;   neg a3, a3
;   and a4, a3, a1
;   not a0, a3
;   and a2, a2, a0
;   or a0, a4, a2
;   ret

function %f(i16, i64, i64) -> i64 {
block0(v0: i16, v1: i64, v2: i64):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i64 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   slli a3,a0,48
;   srai a5,a3,48
;   xori a3,a5,42
;   seqz a3,a3
;   sub a3,zero,a3
;   and a4,a3,a1
;   not a0,a3
;   and a2,a2,a0
;   or a0,a4,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a3, a0, 0x30
;   srai a5, a3, 0x30
;   xori a3, a5, 0x2a
;   seqz a3, a3
;   neg a3, a3
;   and a4, a3, a1
;   not a0, a3
;   and a2, a2, a0
;   or a0, a4, a2
;   ret

function %f(i16, i128, i128) -> i128 {
block0(v0: i16, v1: i128, v2: i128):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i128 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   slli a5,a0,48
;   srai a5,a5,48
;   xori a5,a5,42
;   seqz a5,a5
;   sub a5,zero,a5
;   and a0,a5,a1
;   not a1,a5
;   and a1,a3,a1
;   or a0,a0,a1
;   and a2,a5,a2
;   not a5,a5
;   and a1,a4,a5
;   or a1,a2,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a5, a0, 0x30
;   srai a5, a5, 0x30
;   xori a5, a5, 0x2a
;   seqz a5, a5
;   neg a5, a5
;   and a0, a5, a1
;   not a1, a5
;   and a1, a3, a1
;   or a0, a0, a1
;   and a2, a5, a2
;   not a5, a5
;   and a1, a4, a5
;   or a1, a2, a1
;   ret

function %f(i32, i8, i8) -> i8 {
block0(v0: i32, v1: i8, v2: i8):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i8 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   sext.w a3,a0
;   xori a5,a3,42
;   seqz a3,a5
;   sub a4,zero,a3
;   and a3,a4,a1
;   not a5,a4
;   and a1,a2,a5
;   or a0,a3,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sext.w a3, a0
;   xori a5, a3, 0x2a
;   seqz a3, a5
;   neg a4, a3
;   and a3, a4, a1
;   not a5, a4
;   and a1, a2, a5
;   or a0, a3, a1
;   ret

function %f(i32, i16, i16) -> i16 {
block0(v0: i32, v1: i16, v2: i16):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i16 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   sext.w a3,a0
;   xori a5,a3,42
;   seqz a3,a5
;   sub a4,zero,a3
;   and a3,a4,a1
;   not a5,a4
;   and a1,a2,a5
;   or a0,a3,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sext.w a3, a0
;   xori a5, a3, 0x2a
;   seqz a3, a5
;   neg a4, a3
;   and a3, a4, a1
;   not a5, a4
;   and a1, a2, a5
;   or a0, a3, a1
;   ret

function %f(i32, i32, i32) -> i32 {
block0(v0: i32, v1: i32, v2: i32):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i32 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   sext.w a3,a0
;   xori a5,a3,42
;   seqz a3,a5
;   sub a4,zero,a3
;   and a3,a4,a1
;   not a5,a4
;   and a1,a2,a5
;   or a0,a3,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sext.w a3, a0
;   xori a5, a3, 0x2a
;   seqz a3, a5
;   neg a4, a3
;   and a3, a4, a1
;   not a5, a4
;   and a1, a2, a5
;   or a0, a3, a1
;   ret

function %f(i32, i64, i64) -> i64 {
block0(v0: i32, v1: i64, v2: i64):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i64 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   sext.w a3,a0
;   xori a5,a3,42
;   seqz a3,a5
;   sub a4,zero,a3
;   and a3,a4,a1
;   not a5,a4
;   and a1,a2,a5
;   or a0,a3,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sext.w a3, a0
;   xori a5, a3, 0x2a
;   seqz a3, a5
;   neg a4, a3
;   and a3, a4, a1
;   not a5, a4
;   and a1, a2, a5
;   or a0, a3, a1
;   ret

function %f(i32, i128, i128) -> i128 {
block0(v0: i32, v1: i128, v2: i128):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i128 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   sext.w a5,a0
;   xori a5,a5,42
;   seqz a5,a5
;   sub a5,zero,a5
;   and a0,a5,a1
;   not a1,a5
;   and a3,a3,a1
;   or a0,a0,a3
;   and a1,a5,a2
;   not a3,a5
;   and a5,a4,a3
;   or a1,a1,a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sext.w a5, a0
;   xori a5, a5, 0x2a
;   seqz a5, a5
;   neg a5, a5
;   and a0, a5, a1
;   not a1, a5
;   and a3, a3, a1
;   or a0, a0, a3
;   and a1, a5, a2
;   not a3, a5
;   and a5, a4, a3
;   or a1, a1, a5
;   ret

function %f(i64, i8, i8) -> i8 {
block0(v0: i64, v1: i8, v2: i8):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i8 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   xori a3,a0,42
;   seqz a5,a3
;   sub a0,zero,a5
;   and a3,a0,a1
;   not a4,a0
;   and a0,a2,a4
;   or a0,a3,a0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   xori a3, a0, 0x2a
;   seqz a5, a3
;   neg a0, a5
;   and a3, a0, a1
;   not a4, a0
;   and a0, a2, a4
;   or a0, a3, a0
;   ret

function %f(i64, i16, i16) -> i16 {
block0(v0: i64, v1: i16, v2: i16):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i16 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   xori a3,a0,42
;   seqz a5,a3
;   sub a0,zero,a5
;   and a3,a0,a1
;   not a4,a0
;   and a0,a2,a4
;   or a0,a3,a0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   xori a3, a0, 0x2a
;   seqz a5, a3
;   neg a0, a5
;   and a3, a0, a1
;   not a4, a0
;   and a0, a2, a4
;   or a0, a3, a0
;   ret

function %f(i64, i32, i32) -> i32 {
block0(v0: i64, v1: i32, v2: i32):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i32 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   xori a3,a0,42
;   seqz a5,a3
;   sub a0,zero,a5
;   and a3,a0,a1
;   not a4,a0
;   and a0,a2,a4
;   or a0,a3,a0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   xori a3, a0, 0x2a
;   seqz a5, a3
;   neg a0, a5
;   and a3, a0, a1
;   not a4, a0
;   and a0, a2, a4
;   or a0, a3, a0
;   ret

function %f(i64, i64, i64) -> i64 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i64 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   xori a3,a0,42
;   seqz a5,a3
;   sub a0,zero,a5
;   and a3,a0,a1
;   not a4,a0
;   and a0,a2,a4
;   or a0,a3,a0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   xori a3, a0, 0x2a
;   seqz a5, a3
;   neg a0, a5
;   and a3, a0, a1
;   not a4, a0
;   and a0, a2, a4
;   or a0, a3, a0
;   ret

function %f(i64, i128, i128) -> i128 {
block0(v0: i64, v1: i128, v2: i128):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select_spectre_guard.i128 v4, v1, v2
  return v5
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   sd s11,-8(sp)
;   addi sp,sp,-16
; block0:
;   mv s11,a3
;   xori a3,a0,42
;   seqz a5,a3
;   sub a3,zero,a5
;   and a5,a3,a1
;   not a0,a3
;   mv a1,s11
;   and a0,a1,a0
;   or a0,a5,a0
;   and a1,a3,a2
;   not a2,a3
;   and a4,a4,a2
;   or a1,a1,a4
;   addi sp,sp,16
;   ld s11,-8(sp)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
;   sd s11, -8(sp)
;   addi sp, sp, -0x10
; block1: ; offset 0x18
;   mv s11, a3
;   xori a3, a0, 0x2a
;   seqz a5, a3
;   neg a3, a5
;   and a5, a3, a1
;   not a0, a3
;   mv a1, s11
;   and a0, a1, a0
;   or a0, a5, a0
;   and a1, a3, a2
;   not a2, a3
;   and a4, a4, a2
;   or a1, a1, a4
;   addi sp, sp, 0x10
;   ld s11, -8(sp)
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %f(i128, i8, i8) -> i8 {
block0(v0: i128, v1: i8, v2: i8):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select_spectre_guard.i8 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   li a4,42
;   li a5,0
;   xor a0,a0,a4
;   xor a4,a1,a5
;   or a4,a0,a4
;   seqz a0,a4
;   sub a5,zero,a0
;   and a1,a5,a2
;   not a4,a5
;   and a5,a3,a4
;   or a0,a1,a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a4, zero, 0x2a
;   mv a5, zero
;   xor a0, a0, a4
;   xor a4, a1, a5
;   or a4, a0, a4
;   seqz a0, a4
;   neg a5, a0
;   and a1, a5, a2
;   not a4, a5
;   and a5, a3, a4
;   or a0, a1, a5
;   ret

function %f(i128, i16, i16) -> i16 {
block0(v0: i128, v1: i16, v2: i16):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select_spectre_guard.i16 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   li a4,42
;   li a5,0
;   xor a0,a0,a4
;   xor a4,a1,a5
;   or a4,a0,a4
;   seqz a0,a4
;   sub a5,zero,a0
;   and a1,a5,a2
;   not a4,a5
;   and a5,a3,a4
;   or a0,a1,a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a4, zero, 0x2a
;   mv a5, zero
;   xor a0, a0, a4
;   xor a4, a1, a5
;   or a4, a0, a4
;   seqz a0, a4
;   neg a5, a0
;   and a1, a5, a2
;   not a4, a5
;   and a5, a3, a4
;   or a0, a1, a5
;   ret

function %f(i128, i32, i32) -> i32 {
block0(v0: i128, v1: i32, v2: i32):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select_spectre_guard.i32 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   li a4,42
;   li a5,0
;   xor a0,a0,a4
;   xor a4,a1,a5
;   or a4,a0,a4
;   seqz a0,a4
;   sub a5,zero,a0
;   and a1,a5,a2
;   not a4,a5
;   and a5,a3,a4
;   or a0,a1,a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a4, zero, 0x2a
;   mv a5, zero
;   xor a0, a0, a4
;   xor a4, a1, a5
;   or a4, a0, a4
;   seqz a0, a4
;   neg a5, a0
;   and a1, a5, a2
;   not a4, a5
;   and a5, a3, a4
;   or a0, a1, a5
;   ret

function %f(i128, i64, i64) -> i64 {
block0(v0: i128, v1: i64, v2: i64):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select_spectre_guard.i64 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   li a4,42
;   li a5,0
;   xor a0,a0,a4
;   xor a4,a1,a5
;   or a4,a0,a4
;   seqz a0,a4
;   sub a5,zero,a0
;   and a1,a5,a2
;   not a4,a5
;   and a5,a3,a4
;   or a0,a1,a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a4, zero, 0x2a
;   mv a5, zero
;   xor a0, a0, a4
;   xor a4, a1, a5
;   or a4, a0, a4
;   seqz a0, a4
;   neg a5, a0
;   and a1, a5, a2
;   not a4, a5
;   and a5, a3, a4
;   or a0, a1, a5
;   ret

function %f(i128, i128, i128) -> i128 {
block0(v0: i128, v1: i128, v2: i128):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select_spectre_guard.i128 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   li a6,42
;   li a7,0
;   xor a0,a0,a6
;   xor a1,a1,a7
;   or a0,a0,a1
;   seqz a0,a0
;   sub a1,zero,a0
;   and a0,a1,a2
;   not a2,a1
;   and a2,a4,a2
;   or a0,a0,a2
;   and a2,a1,a3
;   not a1,a1
;   and a3,a5,a1
;   or a1,a2,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a6, zero, 0x2a
;   mv a7, zero
;   xor a0, a0, a6
;   xor a1, a1, a7
;   or a0, a0, a1
;   seqz a0, a0
;   neg a1, a0
;   and a0, a1, a2
;   not a2, a1
;   and a2, a4, a2
;   or a0, a0, a2
;   and a2, a1, a3
;   not a1, a1
;   and a3, a5, a1
;   or a1, a2, a3
;   ret

