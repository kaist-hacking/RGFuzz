test compile precise-output
set unwind_info=false
target riscv64


function %ishl_i8_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   andi a3,a1,7
;   sllw a0,a0,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a3, a1, 7
;   sllw a0, a0, a3
;   ret

function %ishl_i8_i16(i8, i16) -> i8 {
block0(v0: i8, v1: i16):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   andi a3,a1,7
;   sllw a0,a0,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a3, a1, 7
;   sllw a0, a0, a3
;   ret

function %ishl_i8_i32(i8, i32) -> i8 {
block0(v0: i8, v1: i32):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   andi a3,a1,7
;   sllw a0,a0,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a3, a1, 7
;   sllw a0, a0, a3
;   ret

function %ishl_i8_i64(i8, i64) -> i8 {
block0(v0: i8, v1: i64):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   andi a3,a1,7
;   sllw a0,a0,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a3, a1, 7
;   sllw a0, a0, a3
;   ret

function %ishl_i8_i128(i8, i128) -> i8 {
block0(v0: i8, v1: i128):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   andi a4,a1,7
;   sllw a0,a0,a4
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a4, a1, 7
;   sllw a0, a0, a4
;   ret

function %ishl_i16_i8(i16, i8) -> i16 {
block0(v0: i16, v1: i8):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   andi a3,a1,15
;   sllw a0,a0,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a3, a1, 0xf
;   sllw a0, a0, a3
;   ret

function %ishl_i16_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   andi a3,a1,15
;   sllw a0,a0,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a3, a1, 0xf
;   sllw a0, a0, a3
;   ret

function %ishl_i16_i32(i16, i32) -> i16 {
block0(v0: i16, v1: i32):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   andi a3,a1,15
;   sllw a0,a0,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a3, a1, 0xf
;   sllw a0, a0, a3
;   ret

function %ishl_i16_i64(i16, i64) -> i16 {
block0(v0: i16, v1: i64):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   andi a3,a1,15
;   sllw a0,a0,a3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a3, a1, 0xf
;   sllw a0, a0, a3
;   ret

function %ishl_i16_i128(i16, i128) -> i16 {
block0(v0: i16, v1: i128):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   andi a4,a1,15
;   sllw a0,a0,a4
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a4, a1, 0xf
;   sllw a0, a0, a4
;   ret

function %ishl_i32_i8(i32, i8) -> i32 {
block0(v0: i32, v1: i8):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   sllw a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sllw a0, a0, a1
;   ret

function %ishl_i32_i16(i32, i16) -> i32 {
block0(v0: i32, v1: i16):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   sllw a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sllw a0, a0, a1
;   ret

function %ishl_i32_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   sllw a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sllw a0, a0, a1
;   ret

function %ishl_i32_i64(i32, i64) -> i32 {
block0(v0: i32, v1: i64):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   sllw a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sllw a0, a0, a1
;   ret

function %ishl_i32_i128(i32, i128) -> i32 {
block0(v0: i32, v1: i128):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   sllw a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sllw a0, a0, a1
;   ret

function %ishl_i64_i8(i64, i8) -> i64 {
block0(v0: i64, v1: i8):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   sll a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sll a0, a0, a1
;   ret

function %ishl_i64_i16(i64, i16) -> i64 {
block0(v0: i64, v1: i16):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   sll a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sll a0, a0, a1
;   ret

function %ishl_i64_i32(i64, i32) -> i64 {
block0(v0: i64, v1: i32):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   sll a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sll a0, a0, a1
;   ret

function %ishl_i64_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   sll a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sll a0, a0, a1
;   ret

function %ishl_i64_i128(i64, i128) -> i64 {
block0(v0: i64, v1: i128):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   sll a0,a0,a1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sll a0, a0, a1
;   ret

function %ishl_i128_i8(i128, i8) -> i128 {
block0(v0: i128, v1: i8):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   andi a5,a2,63
;   li a3,64
;   sub a3,a3,a5
;   sll a4,a0,a5
;   srl a0,a0,a3
;   select a3,zero,a0##condition=(a5 eq zero)
;   sll a5,a1,a5
;   or a5,a3,a5
;   li a3,64
;   andi a2,a2,127
;   select [a0,a1],[zero,a4],[a4,a5]##condition=(a2 uge a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a5, a2, 0x3f
;   addi a3, zero, 0x40
;   sub a3, a3, a5
;   sll a4, a0, a5
;   srl a0, a0, a3
;   bnez a5, 0xc
;   mv a3, zero
;   j 8
;   mv a3, a0
;   sll a5, a1, a5
;   or a5, a3, a5
;   addi a3, zero, 0x40
;   andi a2, a2, 0x7f
;   bltu a2, a3, 0x10
;   mv a0, zero
;   mv a1, a4
;   j 0xc
;   mv a0, a4
;   mv a1, a5
;   ret

function %ishl_i128_i16(i128, i16) -> i128 {
block0(v0: i128, v1: i16):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   andi a5,a2,63
;   li a3,64
;   sub a3,a3,a5
;   sll a4,a0,a5
;   srl a0,a0,a3
;   select a3,zero,a0##condition=(a5 eq zero)
;   sll a5,a1,a5
;   or a5,a3,a5
;   li a3,64
;   andi a2,a2,127
;   select [a0,a1],[zero,a4],[a4,a5]##condition=(a2 uge a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a5, a2, 0x3f
;   addi a3, zero, 0x40
;   sub a3, a3, a5
;   sll a4, a0, a5
;   srl a0, a0, a3
;   bnez a5, 0xc
;   mv a3, zero
;   j 8
;   mv a3, a0
;   sll a5, a1, a5
;   or a5, a3, a5
;   addi a3, zero, 0x40
;   andi a2, a2, 0x7f
;   bltu a2, a3, 0x10
;   mv a0, zero
;   mv a1, a4
;   j 0xc
;   mv a0, a4
;   mv a1, a5
;   ret

function %ishl_i128_i32(i128, i32) -> i128 {
block0(v0: i128, v1: i32):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   andi a5,a2,63
;   li a3,64
;   sub a3,a3,a5
;   sll a4,a0,a5
;   srl a0,a0,a3
;   select a3,zero,a0##condition=(a5 eq zero)
;   sll a5,a1,a5
;   or a5,a3,a5
;   li a3,64
;   andi a2,a2,127
;   select [a0,a1],[zero,a4],[a4,a5]##condition=(a2 uge a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a5, a2, 0x3f
;   addi a3, zero, 0x40
;   sub a3, a3, a5
;   sll a4, a0, a5
;   srl a0, a0, a3
;   bnez a5, 0xc
;   mv a3, zero
;   j 8
;   mv a3, a0
;   sll a5, a1, a5
;   or a5, a3, a5
;   addi a3, zero, 0x40
;   andi a2, a2, 0x7f
;   bltu a2, a3, 0x10
;   mv a0, zero
;   mv a1, a4
;   j 0xc
;   mv a0, a4
;   mv a1, a5
;   ret

function %ishl_i128_i64(i128, i64) -> i128 {
block0(v0: i128, v1: i64):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   andi a5,a2,63
;   li a3,64
;   sub a3,a3,a5
;   sll a4,a0,a5
;   srl a0,a0,a3
;   select a3,zero,a0##condition=(a5 eq zero)
;   sll a5,a1,a5
;   or a5,a3,a5
;   li a3,64
;   andi a2,a2,127
;   select [a0,a1],[zero,a4],[a4,a5]##condition=(a2 uge a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a5, a2, 0x3f
;   addi a3, zero, 0x40
;   sub a3, a3, a5
;   sll a4, a0, a5
;   srl a0, a0, a3
;   bnez a5, 0xc
;   mv a3, zero
;   j 8
;   mv a3, a0
;   sll a5, a1, a5
;   or a5, a3, a5
;   addi a3, zero, 0x40
;   andi a2, a2, 0x7f
;   bltu a2, a3, 0x10
;   mv a0, zero
;   mv a1, a4
;   j 0xc
;   mv a0, a4
;   mv a1, a5
;   ret

function %ishl_i128_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
    v2 = ishl v0, v1
    return v2
}

; VCode:
; block0:
;   mv a5,a0
;   andi a0,a2,63
;   li a3,64
;   sub a3,a3,a0
;   mv a4,a5
;   sll a5,a4,a0
;   srl a3,a4,a3
;   select a3,zero,a3##condition=(a0 eq zero)
;   sll a0,a1,a0
;   or a4,a3,a0
;   li a3,64
;   andi a2,a2,127
;   select [a0,a1],[zero,a5],[a5,a4]##condition=(a2 uge a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mv a5, a0
;   andi a0, a2, 0x3f
;   addi a3, zero, 0x40
;   sub a3, a3, a0
;   mv a4, a5
;   sll a5, a4, a0
;   srl a3, a4, a3
;   bnez a0, 8
;   mv a3, zero
;   sll a0, a1, a0
;   or a4, a3, a0
;   addi a3, zero, 0x40
;   andi a2, a2, 0x7f
;   bltu a2, a3, 0x10
;   mv a0, zero
;   mv a1, a5
;   j 0xc
;   mv a0, a5
;   mv a1, a4
;   ret

