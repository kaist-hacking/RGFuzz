test compile precise-output
set unwind_info=false
target riscv64 has_v

function %scalartovector_i8(i8) -> i8x16 {
block0(v0: i8):
    v1 = scalar_to_vector.i8x16 v0
    return v1
}

; VCode:
; block0:
;   vmv.v.x v11,zero #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.v.i v0,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vxm v15,v11,a0,v0.t #avl=16, #vtype=(e8, m1, ta, ma)
;   vse8.v v15,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xd7, 0x45, 0x00, 0x5e
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xb0, 0x00, 0x5e
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xd7, 0x47, 0xb5, 0x5c
;   .byte 0xa7, 0x87, 0x05, 0x02
;   ret

function %scalartovector_i16(i16) -> i16x8 {
block0(v0: i16):
    v1 = scalar_to_vector.i16x8 v0
    return v1
}

; VCode:
; block0:
;   vmv.v.x v11,zero #avl=8, #vtype=(e16, m1, ta, ma)
;   vmv.v.i v0,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vxm v15,v11,a0,v0.t #avl=8, #vtype=(e16, m1, ta, ma)
;   vse8.v v15,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0xd7, 0x45, 0x00, 0x5e
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xb0, 0x00, 0x5e
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0xd7, 0x47, 0xb5, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x87, 0x05, 0x02
;   ret

function %scalartovector_i32(i32) -> i32x4 {
block0(v0: i32):
    v1 = scalar_to_vector.i32x4 v0
    return v1
}

; VCode:
; block0:
;   vmv.v.x v11,zero #avl=4, #vtype=(e32, m1, ta, ma)
;   vmv.v.i v0,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vxm v15,v11,a0,v0.t #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v15,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0xd7, 0x45, 0x00, 0x5e
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xb0, 0x00, 0x5e
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0xd7, 0x47, 0xb5, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x87, 0x05, 0x02
;   ret

function %scalartovector_i64(i64) -> i64x2 {
block0(v0: i64):
    v1 = scalar_to_vector.i64x2 v0
    return v1
}

; VCode:
; block0:
;   vmv.v.x v11,zero #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv.v.i v0,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vxm v15,v11,a0,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v15,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0xd7, 0x45, 0x00, 0x5e
;   .byte 0x57, 0xb0, 0x00, 0x5e
;   .byte 0xd7, 0x47, 0xb5, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x87, 0x05, 0x02
;   ret

function %scalartovector_f32(f32) -> f32x4 {
block0(v0: f32):
    v1 = scalar_to_vector.f32x4 v0
    return v1
}

; VCode:
; block0:
;   vmv.v.x v11,zero #avl=4, #vtype=(e32, m1, ta, ma)
;   vfmv.s.f v13,fa0 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmv.v.i v0,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vvm v9,v11,v13,v0.t #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v9,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0xd7, 0x45, 0x00, 0x5e
;   .byte 0xd7, 0x56, 0x05, 0x42
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xb0, 0x00, 0x5e
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0xd7, 0x84, 0xb6, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x04, 0x05, 0x02
;   ret

function %scalartovector_f64(f64) -> f64x2 {
block0(v0: f64):
    v1 = scalar_to_vector.f64x2 v0
    return v1
}

; VCode:
; block0:
;   vmv.v.x v11,zero #avl=2, #vtype=(e64, m1, ta, ma)
;   vfmv.s.f v13,fa0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv.v.i v0,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vvm v9,v11,v13,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v9,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0xd7, 0x45, 0x00, 0x5e
;   .byte 0xd7, 0x56, 0x05, 0x42
;   .byte 0x57, 0xb0, 0x00, 0x5e
;   .byte 0xd7, 0x84, 0xb6, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x04, 0x05, 0x02
;   ret

function %scalartovector_i8_imm(i8) -> i8x16 {
block0(v0: i8):
    v1 = iconst.i8 7
    v2 = scalar_to_vector.i8x16 v1
    return v2
}

; VCode:
; block0:
;   vmv.v.x v11,zero #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.v.i v0,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v15,v11,7,v0.t #avl=16, #vtype=(e8, m1, ta, ma)
;   vse8.v v15,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xd7, 0x45, 0x00, 0x5e
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xb0, 0x00, 0x5e
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xd7, 0xb7, 0xb3, 0x5c
;   .byte 0xa7, 0x87, 0x05, 0x02
;   ret

function %scalartovector_i16_imm(i16) -> i16x8 {
block0(v0: i16):
    v1 = iconst.i16 7
    v2 = scalar_to_vector.i16x8 v1
    return v2
}

; VCode:
; block0:
;   vmv.v.x v11,zero #avl=8, #vtype=(e16, m1, ta, ma)
;   vmv.v.i v0,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v15,v11,7,v0.t #avl=8, #vtype=(e16, m1, ta, ma)
;   vse8.v v15,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0xd7, 0x45, 0x00, 0x5e
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xb0, 0x00, 0x5e
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0xd7, 0xb7, 0xb3, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x87, 0x05, 0x02
;   ret

function %scalartovector_i32_imm(i32) -> i32x4 {
block0(v0: i32):
    v1 = iconst.i32 7
    v2 = scalar_to_vector.i32x4 v1
    return v2
}

; VCode:
; block0:
;   vmv.v.x v11,zero #avl=4, #vtype=(e32, m1, ta, ma)
;   vmv.v.i v0,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v15,v11,7,v0.t #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v15,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0xd7, 0x45, 0x00, 0x5e
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xb0, 0x00, 0x5e
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0xd7, 0xb7, 0xb3, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x87, 0x05, 0x02
;   ret

function %scalartovector_i64_imm(i64) -> i64x2 {
block0(v0: i64):
    v1 = iconst.i64 7
    v2 = scalar_to_vector.i64x2 v1
    return v2
}

; VCode:
; block0:
;   vmv.v.x v11,zero #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv.v.i v0,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v15,v11,7,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v15,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0xd7, 0x45, 0x00, 0x5e
;   .byte 0x57, 0xb0, 0x00, 0x5e
;   .byte 0xd7, 0xb7, 0xb3, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x87, 0x05, 0x02
;   ret

