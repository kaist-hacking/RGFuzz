test compile precise-output
set unwind_info=false
target riscv64


function %ushr_i8_const_i8(i8) -> i8 {
block0(v0: i8):
    v1 = iconst.i8 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   andi a2,a0,255
;   srliw a0,a2,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a2, a0, 0xff
;   srliw a0, a2, 5
;   ret

function %ushr_i8_const_i16(i8) -> i8 {
block0(v0: i8):
    v1 = iconst.i16 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   andi a2,a0,255
;   srliw a0,a2,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a2, a0, 0xff
;   srliw a0, a2, 5
;   ret

function %ushr_i8_const_i32(i8) -> i8 {
block0(v0: i8):
    v1 = iconst.i32 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   andi a2,a0,255
;   srliw a0,a2,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a2, a0, 0xff
;   srliw a0, a2, 5
;   ret

function %ushr_i8_const_i64(i8) -> i8 {
block0(v0: i8):
    v1 = iconst.i64 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   andi a2,a0,255
;   srliw a0,a2,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a2, a0, 0xff
;   srliw a0, a2, 5
;   ret

function %ushr_i8_const_i128(i8) -> i8 {
block0(v0: i8):
    v1 = iconst.i64 5
    v2 = uextend.i128 v1
    v3 = ushr v0, v2
    return v3
}

; VCode:
; block0:
;   andi a2,a0,255
;   srliw a0,a2,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a2, a0, 0xff
;   srliw a0, a2, 5
;   ret

function %ushr_i16_const_i8(i16) -> i16 {
block0(v0: i16):
    v1 = iconst.i8 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   slli a2,a0,48
;   srli a4,a2,48
;   srliw a0,a4,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a2, a0, 0x30
;   srli a4, a2, 0x30
;   srliw a0, a4, 5
;   ret

function %ushr_i16_const_i16(i16) -> i16 {
block0(v0: i16):
    v1 = iconst.i16 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   slli a2,a0,48
;   srli a4,a2,48
;   srliw a0,a4,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a2, a0, 0x30
;   srli a4, a2, 0x30
;   srliw a0, a4, 5
;   ret

function %ushr_i16_const_i32(i16) -> i16 {
block0(v0: i16):
    v1 = iconst.i32 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   slli a2,a0,48
;   srli a4,a2,48
;   srliw a0,a4,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a2, a0, 0x30
;   srli a4, a2, 0x30
;   srliw a0, a4, 5
;   ret

function %ushr_i16_const_i64(i16) -> i16 {
block0(v0: i16):
    v1 = iconst.i64 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   slli a2,a0,48
;   srli a4,a2,48
;   srliw a0,a4,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a2, a0, 0x30
;   srli a4, a2, 0x30
;   srliw a0, a4, 5
;   ret

function %ushr_i16_const_i128(i16) -> i16 {
block0(v0: i16):
    v1 = iconst.i64 5
    v2 = uextend.i128 v1
    v3 = ushr v0, v2
    return v3
}

; VCode:
; block0:
;   slli a2,a0,48
;   srli a4,a2,48
;   srliw a0,a4,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a2, a0, 0x30
;   srli a4, a2, 0x30
;   srliw a0, a4, 5
;   ret

function %ushr_i32_const_i8(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i8 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   srliw a0,a0,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   srliw a0, a0, 5
;   ret

function %ushr_i32_const_i16(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i16 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   srliw a0,a0,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   srliw a0, a0, 5
;   ret

function %ushr_i32_const_i32(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   srliw a0,a0,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   srliw a0, a0, 5
;   ret

function %ushr_i32_const_i64(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i64 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   srliw a0,a0,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   srliw a0, a0, 5
;   ret

function %ushr_i32_const_i128(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i64 5
    v2 = uextend.i128 v1
    v3 = ushr v0, v2
    return v3
}

; VCode:
; block0:
;   srliw a0,a0,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   srliw a0, a0, 5
;   ret

function %ushr_i64_const_i8(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i8 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   srli a0,a0,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   srli a0, a0, 5
;   ret

function %ushr_i64_const_i16(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i16 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   srli a0,a0,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   srli a0, a0, 5
;   ret

function %ushr_i64_const_i32(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i32 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   srli a0,a0,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   srli a0, a0, 5
;   ret

function %ushr_i64_const_i64(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   srli a0,a0,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   srli a0, a0, 5
;   ret

function %ushr_i64_const_i128(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 5
    v2 = uextend.i128 v1
    v3 = ushr v0, v2
    return v3
}

; VCode:
; block0:
;   srli a0,a0,5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   srli a0, a0, 5
;   ret

function %ushr_i128_const_i8(i128) -> i128 {
block0(v0: i128):
    v1 = iconst.i8 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   li a3,5
;   andi a4,a3,63
;   li a2,64
;   sub a2,a2,a4
;   sll a5,a1,a2
;   select a2,zero,a5##condition=(a4 eq zero)
;   srl a5,a0,a4
;   or a5,a2,a5
;   li t0,64
;   srl a2,a1,a4
;   andi a4,a3,127
;   select [a0,a1],[a2,zero],[a5,a2]##condition=(a4 uge t0)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 5
;   andi a4, a3, 0x3f
;   addi a2, zero, 0x40
;   sub a2, a2, a4
;   sll a5, a1, a2
;   bnez a4, 0xc
;   mv a2, zero
;   j 8
;   mv a2, a5
;   srl a5, a0, a4
;   or a5, a2, a5
;   addi t0, zero, 0x40
;   srl a2, a1, a4
;   andi a4, a3, 0x7f
;   bltu a4, t0, 0x10
;   mv a0, a2
;   mv a1, zero
;   j 0xc
;   mv a0, a5
;   mv a1, a2
;   ret

function %ushr_i128_const_i16(i128) -> i128 {
block0(v0: i128):
    v1 = iconst.i16 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   li a3,5
;   andi a4,a3,63
;   li a2,64
;   sub a2,a2,a4
;   sll a5,a1,a2
;   select a2,zero,a5##condition=(a4 eq zero)
;   srl a5,a0,a4
;   or a5,a2,a5
;   li t0,64
;   srl a2,a1,a4
;   andi a4,a3,127
;   select [a0,a1],[a2,zero],[a5,a2]##condition=(a4 uge t0)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 5
;   andi a4, a3, 0x3f
;   addi a2, zero, 0x40
;   sub a2, a2, a4
;   sll a5, a1, a2
;   bnez a4, 0xc
;   mv a2, zero
;   j 8
;   mv a2, a5
;   srl a5, a0, a4
;   or a5, a2, a5
;   addi t0, zero, 0x40
;   srl a2, a1, a4
;   andi a4, a3, 0x7f
;   bltu a4, t0, 0x10
;   mv a0, a2
;   mv a1, zero
;   j 0xc
;   mv a0, a5
;   mv a1, a2
;   ret

function %ushr_i128_const_i32(i128) -> i128 {
block0(v0: i128):
    v1 = iconst.i32 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   li a3,5
;   andi a4,a3,63
;   li a2,64
;   sub a2,a2,a4
;   sll a5,a1,a2
;   select a2,zero,a5##condition=(a4 eq zero)
;   srl a5,a0,a4
;   or a5,a2,a5
;   li t0,64
;   srl a2,a1,a4
;   andi a4,a3,127
;   select [a0,a1],[a2,zero],[a5,a2]##condition=(a4 uge t0)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 5
;   andi a4, a3, 0x3f
;   addi a2, zero, 0x40
;   sub a2, a2, a4
;   sll a5, a1, a2
;   bnez a4, 0xc
;   mv a2, zero
;   j 8
;   mv a2, a5
;   srl a5, a0, a4
;   or a5, a2, a5
;   addi t0, zero, 0x40
;   srl a2, a1, a4
;   andi a4, a3, 0x7f
;   bltu a4, t0, 0x10
;   mv a0, a2
;   mv a1, zero
;   j 0xc
;   mv a0, a5
;   mv a1, a2
;   ret

function %ushr_i128_const_i64(i128) -> i128 {
block0(v0: i128):
    v1 = iconst.i64 5
    v2 = ushr v0, v1
    return v2
}

; VCode:
; block0:
;   li a3,5
;   andi a4,a3,63
;   li a2,64
;   sub a2,a2,a4
;   sll a5,a1,a2
;   select a2,zero,a5##condition=(a4 eq zero)
;   srl a5,a0,a4
;   or a5,a2,a5
;   li t0,64
;   srl a2,a1,a4
;   andi a4,a3,127
;   select [a0,a1],[a2,zero],[a5,a2]##condition=(a4 uge t0)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a3, zero, 5
;   andi a4, a3, 0x3f
;   addi a2, zero, 0x40
;   sub a2, a2, a4
;   sll a5, a1, a2
;   bnez a4, 0xc
;   mv a2, zero
;   j 8
;   mv a2, a5
;   srl a5, a0, a4
;   or a5, a2, a5
;   addi t0, zero, 0x40
;   srl a2, a1, a4
;   andi a4, a3, 0x7f
;   bltu a4, t0, 0x10
;   mv a0, a2
;   mv a1, zero
;   j 0xc
;   mv a0, a5
;   mv a1, a2
;   ret

function %ushr_i128_const_i128(i128) -> i128 {
block0(v0: i128):
    v1 = iconst.i64 5
    v2 = uextend.i128 v1
    v3 = ushr v0, v2
    return v3
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   sd s11,-8(sp)
;   addi sp,sp,-16
; block0:
;   li a4,5
;   li a5,0
;   andi a5,a4,63
;   li a2,64
;   sub a3,a2,a5
;   sll a2,a1,a3
;   select a2,zero,a2##condition=(a5 eq zero)
;   srl a3,a0,a5
;   or s11,a2,a3
;   li a2,64
;   srl a3,a1,a5
;   andi a5,a4,127
;   select [a0,a1],[a3,zero],[s11,a3]##condition=(a5 uge a2)
;   addi sp,sp,16
;   ld s11,-8(sp)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
;   sd s11, -8(sp)
;   addi sp, sp, -0x10
; block1: ; offset 0x18
;   addi a4, zero, 5
;   mv a5, zero
;   andi a5, a4, 0x3f
;   addi a2, zero, 0x40
;   sub a3, a2, a5
;   sll a2, a1, a3
;   bnez a5, 8
;   mv a2, zero
;   srl a3, a0, a5
;   or s11, a2, a3
;   addi a2, zero, 0x40
;   srl a3, a1, a5
;   andi a5, a4, 0x7f
;   bltu a5, a2, 0x10
;   mv a0, a3
;   mv a1, zero
;   j 0xc
;   mv a0, s11
;   mv a1, a3
;   addi sp, sp, 0x10
;   ld s11, -8(sp)
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

