test compile precise-output
set unwind_info=false
target riscv64 has_zbb

function %popcnt8(i8) -> i8 {
block0(v0: i8):
    v1 = popcnt v0
    return v1
}

; VCode:
; block0:
;   andi a2,a0,255
;   cpop a0,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a2, a0, 0xff
;   .byte 0x13, 0x15, 0x26, 0x60
;   ret

function %popcnt16(i16) -> i16 {
block0(v0: i16):
    v1 = popcnt v0
    return v1
}

; VCode:
; block0:
;   zext.h a2,a0
;   cpop a0,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x3b, 0x46, 0x05, 0x08
;   .byte 0x13, 0x15, 0x26, 0x60
;   ret

function %popcnt32(i32) -> i32 {
block0(v0: i32):
    v1 = popcnt v0
    return v1
}

; VCode:
; block0:
;   cpopw a0,a0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x1b, 0x15, 0x25, 0x60
;   ret

function %popcnt64(i64) -> i64 {
block0(v0: i64):
    v1 = popcnt v0
    return v1
}

; VCode:
; block0:
;   cpop a0,a0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x13, 0x15, 0x25, 0x60
;   ret

function %popcnt128(i128) -> i128 {
block0(v0: i128):
    v1 = popcnt v0
    return v1
}

; VCode:
; block0:
;   cpop a3,a0
;   cpop a5,a1
;   add a0,a3,a5
;   li a1,0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x93, 0x16, 0x25, 0x60
;   .byte 0x93, 0x97, 0x25, 0x60
;   add a0, a3, a5
;   mv a1, zero
;   ret

