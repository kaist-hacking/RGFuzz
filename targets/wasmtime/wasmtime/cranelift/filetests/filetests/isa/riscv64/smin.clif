test compile precise-output
set unwind_info=false
target riscv64 has_v

function %smin_i8(i8, i8) -> i8{
block0(v0: i8, v1: i8):
    v2 = smin v0, v1
    return v2
}

; VCode:
; block0:
;   slli a3,a0,56
;   srai a5,a3,56
;   slli a1,a1,56
;   srai a3,a1,56
;   select a0,a5,a3##condition=(a5 slt a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a3, a0, 0x38
;   srai a5, a3, 0x38
;   slli a1, a1, 0x38
;   srai a3, a1, 0x38
;   bge a5, a3, 0xc
;   mv a0, a5
;   j 8
;   mv a0, a3
;   ret

function %smin_i16(i16, i16) -> i16{
block0(v0: i16, v1: i16):
    v2 = smin v0, v1
    return v2
}

; VCode:
; block0:
;   slli a3,a0,48
;   srai a5,a3,48
;   slli a1,a1,48
;   srai a3,a1,48
;   select a0,a5,a3##condition=(a5 slt a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a3, a0, 0x30
;   srai a5, a3, 0x30
;   slli a1, a1, 0x30
;   srai a3, a1, 0x30
;   bge a5, a3, 0xc
;   mv a0, a5
;   j 8
;   mv a0, a3
;   ret

function %smin_i32(i32, i32) -> i32{
block0(v0: i32, v1: i32):
    v2 = smin v0, v1
    return v2
}

; VCode:
; block0:
;   sext.w a3,a0
;   sext.w a5,a1
;   select a0,a3,a5##condition=(a3 slt a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sext.w a3, a0
;   sext.w a5, a1
;   bge a3, a5, 0xc
;   mv a0, a3
;   j 8
;   mv a0, a5
;   ret

function %smin_i64(i64, i64) -> i64{
block0(v0: i64, v1: i64):
    v2 = smin v0, v1
    return v2
}

; VCode:
; block0:
;   select a0,a0,a1##condition=(a0 slt a1)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   blt a0, a1, 8
;   mv a0, a1
;   ret

function %smin_i128(i128, i128) -> i128{
block0(v0: i128, v1: i128):
    v2 = smin v0, v1
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   sd s7,-8(sp)
;   sd s9,-16(sp)
;   addi sp,sp,-16
; block0:
;   slt a5,a1,a3
;   sltu a4,a0,a2
;   mv s7,a0
;   xor a0,a1,a3
;   mv s9,a1
;   select a5,a4,a5##condition=(a0 eq zero)
;   mv a4,s7
;   select [a0,a1],[a4,s9],[a2,a3]##condition=(a5 ne zero)
;   addi sp,sp,16
;   ld s7,-8(sp)
;   ld s9,-16(sp)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
;   sd s7, -8(sp)
;   sd s9, -0x10(sp)
;   addi sp, sp, -0x10
; block1: ; offset 0x1c
;   slt a5, a1, a3
;   sltu a4, a0, a2
;   mv s7, a0
;   xor a0, a1, a3
;   mv s9, a1
;   bnez a0, 8
;   mv a5, a4
;   mv a4, s7
;   beqz a5, 0x10
;   mv a0, a4
;   mv a1, s9
;   j 0xc
;   mv a0, a2
;   mv a1, a3
;   addi sp, sp, 0x10
;   ld s7, -8(sp)
;   ld s9, -0x10(sp)
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

