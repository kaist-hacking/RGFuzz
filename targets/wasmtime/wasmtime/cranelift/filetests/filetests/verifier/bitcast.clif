test verifier

; bitcast between two types of equal size is ok
function %valid_bitcast1(i32) -> f32 { ; Ok
block0(v0: i32):
    v1 = bitcast.f32 v0
    return v1
}

; bitcast to a type larger than the operand is not ok
function %valid_bitcast2(i32) -> i64 {
block0(v0: i32):
    v1 = bitcast.i64 v0 ; error: The bitcast argument v0 has a type of 32 bits, which doesn't match an expected type of 64 bits
    return v1
}

; bitcast to a smaller type is not ok
function %bad_bitcast(i64) -> i32 {
block0(v0: i64):
    v1 = bitcast.i32 v0 ; error: The bitcast argument v0 has a type of 64 bits, which doesn't match an expected type of 32 bits
    return v1
}

; "little"/"big" flag modifier is ok
function %bitcast_little(i32) -> f32 { ; Ok
block0(v0: i32):
    v1 = bitcast.f32 little v0
    return v1
}
function %bitcast_big(i32) -> f32 { ; Ok
block0(v0: i32):
    v1 = bitcast.f32 big v0
    return v1
}

; other flag modifiers are not ok
function %bitcast_big(i32) -> f32 {
block0(v0: i32):
    v1 = bitcast.f32 notrap v0 ;  error: The bitcast instruction only accepts the `big` or `little` memory flags
    return v1
}
function %bitcast_big(i32) -> f32 {
block0(v0: i32):
    v1 = bitcast.f32 aligned v0 ;  error: The bitcast instruction only accepts the `big` or `little` memory flags
    return v1
}

; if lane counts differ, a byte order specifier is required
function %bitcast_lanes(i32x4) -> i64x2 {
block0(v0: i32x4):
    v1 = bitcast.i64x2 v0 ;  error: Byte order specifier required for bitcast instruction changing lane count
    return v1
}

