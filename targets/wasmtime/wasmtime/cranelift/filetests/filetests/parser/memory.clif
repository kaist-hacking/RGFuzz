test cat
test verifier

function %vmglobal(i64 vmctx) -> i32 {
    gv3 = vmctx
    ; check: gv3 = vmctx
block0(v0: i64):
    v1 = global_value.i32 gv3
    ; check: v1 = global_value.i32 gv3
    return v1
}

function %load_and_add_imm(i64 vmctx) -> i32 {
    gv2 = vmctx
    gv3 = load.i32 notrap aligned gv2-72
    gv4 = iadd_imm.i32 gv3, -32
    ; check: gv2 = vmctx
    ; check: gv3 = load.i32 notrap aligned gv2-72
    ; check: gv4 = iadd_imm.i32 gv3, -32
block0(v0: i64):
    v1 = global_value.i32 gv4
    ; check: v1 = global_value.i32 gv4
    return v1
}

; Refer to a global value before it's been declared.
function %backref(i64 vmctx) -> i32 {
    gv0 = iadd_imm.i32 gv1, -32
    ; check: gv0 = iadd_imm.i32 gv1, -32
    gv1 = load.i32 notrap aligned gv2
    ; check: gv1 = load.i32 notrap aligned gv2
    gv2 = vmctx
    ; check: gv2 = vmctx
block0(v0: i64):
    v1 = global_value.i32 gv1
    return v1
}

function %symbol() -> i32 {
    gv0 = symbol %something
    ; check: gv0 = symbol %something
    gv1 = symbol u8:9
    ; check: gv1 = symbol userextname0
block0:
    v0 = global_value.i32 gv0
    ; check: v0 = global_value.i32 gv0
    v1 = global_value.i32 gv1
    ; check: v1 = global_value.i32 gv1
    v2 = bxor v0, v1
    return v2
}

function %table_addr(i32) {
    table0 = dynamic gv1, element_size 1, bound gv2, index_type i32

block0(v0: i32):
    v1 = table_addr.i32 table0, v0
    v2 = table_addr.i32 table0, v0+1
    v3 = table_addr.i32 table0, v0+0
    return
}

; sameln: function %table_addr(i32) fast {
; nextln:     table0 = dynamic gv1, min 0, bound gv2, element_size 1, index_type i32
; nextln: 
; nextln: block0(v0: i32):
; nextln:     v1 = table_addr.i32 table0, v0
; nextln:     v2 = table_addr.i32 table0, v0+1
; nextln:     v3 = table_addr.i32 table0, v0
; nextln:     return
; nextln: }
